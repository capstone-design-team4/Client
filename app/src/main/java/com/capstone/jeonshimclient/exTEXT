package com.example.retrofit2test

import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.util.Log
import com.example.retrofit2test.databinding.ActivityMainBinding
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class MainActivity : AppCompatActivity() {
    val binding by lazy { ActivityMainBinding.inflate(layoutInflater) }
    val api = APIS.create();
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(binding.root)

        binding.getbutton.setOnClickListener {
            api.get_users().enqueue(object : Callback<HTTP_GET_Model> {
                override fun onResponse(
                    call: Call<HTTP_GET_Model>,
                    response: Response<HTTP_GET_Model>
                ) {
                    Log.d("log", response.toString())
                    Log.d("log", response.body().toString())
                    if (!response.body().toString().isEmpty())
                        binding.text.setText(response.body().toString());
                }

                override fun onFailure(call: Call<HTTP_GET_Model>, t: Throwable) {
                    // 실패
                    Log.d("log", t.message.toString())
                    Log.d("log", "fail")
                }
            })
        }

        binding.postbutton.setOnClickListener {
            val data = PostModel(
                binding.idedt.text.toString(),
                binding.pwdedt.text.toString(),
                binding.nickedt.text.toString()
            )
            api.post_users(data).enqueue(object : Callback<PostResult> {
                override fun onResponse(call: Call<PostResult>, response: Response<PostResult>) {
                    Log.d("log", response.toString())
                    Log.d("log", response.body().toString())
                    if (!response.body().toString().isEmpty())
                        binding.text.setText(response.body().toString());
                }

                override fun onFailure(call: Call<PostResult>, t: Throwable) {
                    // 실패
                    Log.d("log", t.message.toString())
                    Log.d("log", "fail")
                }
            })
        }

    }
}

// 오늘의 유저 사용량 가져오기

@RequiresApi(Build.VERSION_CODES.O)
    fun usage_present_expected_Graph_API() {
        for (i in 1..USERCOUNT) {
            val call: Call<List<MeasurementUsageDay>> = api.getMeasurementUsageDay("$i")
            try {
                val execute = call.execute()
                val body = execute.body()
                Log.d("log", "getMeasurementUsageDay$i 1 :" + execute.toString())
                Log.d("log", "getMeasurementUsageDay$i 2 :" + body.toString())
                Log.d(
                    "log", "getMeasurementUsageDay$i 3 :" + body?.count().toString()
                )
                if (body.toString() != "[]" && body != null) {
                    val count = body?.count()!!
                    for (index in 0 until count) {
                        val targetTime =
                            LocalDateTime.parse(body[index].timeCurrent).toLocalTime().hour
                        if (targetTime < STARTHOUR || targetTime > ENDHOUR)
                            continue

                        val current = body[index].current
                        val voltage = body[index].voltage

                        if (!usageTimeHash.containsKey(targetTime))
                            usageTimeHash[targetTime] = 15 * current * voltage
                        else
                            usageTimeHash[targetTime] =
                                15 * current * voltage + usageTimeHash.getValue(targetTime)
                    }
                }
            }catch (e:Exception){
                usage_present_expected_Graph_API()
            }
        }

        for (i in 1..USERCOUNT) {
            val call = api.getPredictionUsage("$i")
            try {
                val execute = call.execute()
                val body = execute.body()
                Log.d("log", "getPredictionUsage$i 1 :" + execute.toString())
                Log.d("log", "getPredictionUsage$i 2 :" + body.toString())
                Log.d(
                    "log", "getPredictionUsage$i 3 :" + body?.count().toString()
                )
                if (body.toString() != "[]" && body != null) {
                    val count = body?.count()!!
                    for (index in 0 until count) {
                        val targetTime =
                            LocalDateTime.parse(body[index].period).toLocalTime().hour
                        if (targetTime < STARTHOUR || targetTime > ENDHOUR)
                            continue

                        val amount = body[index].amount

                        if (!usagePredictionTimeHash.containsKey(targetTime))
                            usagePredictionTimeHash[targetTime] = amount
                        else
                            usagePredictionTimeHash[targetTime] =
                                amount + usagePredictionTimeHash.getValue(targetTime)
                    }
                }
            }catch (e:Exception){
                usage_present_expected_Graph_API()
            }
        }
    }

    fun usage_present_expected_Graph(context: Context) {
        // 현재 사용량 그래프 정보
        val present_Entry = ArrayList<BarEntry>()
        // 예상 사용량 그래프 정보
        val expected_Entry = ArrayList<BarEntry>()

        var x = 1.2f
        var y: Float
        for (key in STARTHOUR..ENDHOUR) {
            Log.d("log", "시간 $key")
            if (usageTimeHash.containsKey(key)) {
                y = usageTimeHash[key]!!
                present_Entry.add(BarEntry(x++, y))
            } else {
                for (key2 in key..ENDHOUR) {
                    if (usagePredictionTimeHash.containsKey(key2)) {
                        y = usagePredictionTimeHash[key2]!!
                        expected_Entry.add(BarEntry(x++, y))
                    } else
                        break
                }
            }
        }

        chart_graphfragment.run {
            description.isEnabled = false // 차트 옆에 별도로 표기되는 description을 안보이게 설정 (false)
            setMaxVisibleValueCount(7) // 최대 보이는 그래프 개수를 7개로 지정
            setPinchZoom(false) // 핀치줌(두손가락으로 줌인 줌 아웃하는것) 설정
            setDrawBarShadow(false) //그래프의 그림자
            setDrawGridBackground(false)//격자구조 넣을건지
            axisLeft.run { //왼쪽 축. 즉 Y방향 축을 뜻한다.
                axisMaximum = 101f //100 위치에 선을 그리기 위해 101f로 맥시멈값 설정
                axisMinimum = 0f // 최소값 0
                granularity = 25f // 50 단위마다 선을 그리려고 설정.
                setDrawLabels(true) // 값 적는거 허용 (0, 50, 100)
                setDrawGridLines(true) //격자 라인 활용
                setDrawAxisLine(false) // 축 그리기 설정
                axisLineColor = ContextCompat.getColor(context, R.color.gray_1) // 축 색깔 설정
                gridColor = ContextCompat.getColor(context, R.color.gray_1) // 축 아닌 격자 색깔 설정
                textColor = ContextCompat.getColor(context, R.color.gray_1) // 라벨 텍스트 컬러 설정
                textSize = 13f //라벨 텍스트 크기
            }
            xAxis.run {
                position = XAxis.XAxisPosition.BOTTOM //X축을 아래에다가 둔다.
                granularity = 1f // 1 단위만큼 간격 두기
                setDrawAxisLine(true) // 축 그림
                setDrawGridLines(false) // 격자
                textColor = ContextCompat.getColor(context, R.color.blue_back) //라벨 색상
                textColor = ContextCompat.getColor(context, R.color.blue_back2) //라벨 색상
                textSize = 12f // 텍스트 크기
                valueFormatter = XAxisFormatter_usage() // X축 라벨값(밑에 표시되는 글자) 바꿔주기 위해 설정
            }
            axisRight.isEnabled = false // 오른쪽 Y축을 안보이게 해줌.
            setTouchEnabled(false) // 그래프 터치해도 아무 변화없게 막음
            animateY(1000) // 밑에서부터 올라오는 애니매이션 적용

            legend.isEnabled = true
            legend.textColor = ContextCompat.getColor(context, R.color.gray_1)
            legend.textSize = 12f
        }


        val present_set = BarDataSet(present_Entry, "현재 사용량") // 데이터셋 초기화
        val expected_set = BarDataSet(expected_Entry, "예상 사용량") // 데이터셋 초기화

        present_set.color = ContextCompat.getColor(context, R.color.blue_back)
        expected_set.color = ContextCompat.getColor(context, R.color.blue_back2)

        val dataSet: ArrayList<IBarDataSet> = ArrayList()
        dataSet.add(present_set)
        dataSet.add(expected_set)

        val chart_data = BarData(dataSet)
        chart_data.barWidth = 0.3f //막대 너비 설정
        chart_graphfragment.run {
            this.data = chart_data //차트의 데이터를 data로 설정해줌.
            setFitBars(true)
            invalidate()
        }
    }

    inner class XAxisFormatter_usage : ValueFormatter() {
        private val days = arrayOf("월", "화", "수", "목", "금", "토", "일")
        override fun getAxisLabel(value: Float, axis: AxisBase?): String {
//            val timesString = ArrayList<String>()
//            for (time in STARTHOUR..ENDHOUR)
//                timesString.add("$time:00")
            return days.getOrNull(value.toInt() - 1) ?: value.toString()
        }
    }